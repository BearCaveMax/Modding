using Terraria;
using Terraria.ID;
using Terraria.ModLoader;
using Terraria.GameContent;
using System;
using Terraria.Audio;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Terraria.Graphics.Shaders;
using Terraria.Graphics.Effects;

namespace UltraPhaseSaber.Content.Projectiles
{
    public class PlasmBurst : ModProjectile
    {
        public override void SetStaticDefaults()
		{
			DisplayName.SetDefault("PlasmBurst");
        }
        public override void SetDefaults()
        {
            Projectile.width = 48;
            Projectile.aiStyle = 0;
            Projectile.height = 48;
            Projectile.friendly = true;
            Projectile.DamageType = DamageClass.Melee;
            Projectile.tileCollide = false;
            Projectile.penetrate = 4;
            Projectile.timeLeft = 330;
            Projectile.light = 1.8f;
            Projectile.extraUpdates = 1;
            Projectile.ignoreWater = true;
        }
        public override void Kill(int timeLeft) {
            for (int k = 0; k < 5; k++) {
                Dust.NewDust(Projectile.position + Projectile.velocity, Projectile.width, Projectile.height, DustID.UltraBrightTorch, Projectile.oldVelocity.X * 0.5f, Projectile.oldVelocity.Y * 0.5f);
            }
            Collision.HitTiles(Projectile.position, Projectile.velocity, Projectile.width, Projectile.height);
            SoundStyle UltraBoomSoundStyle = new SoundStyle("UltraPhaseSaber/Sounds/Item/UltraBeamBoom") with {
                Volume = 1.8f,
                PitchVariance = 0.1f,
                MaxInstances = 3,
            };
            SoundEngine.PlaySound(UltraBoomSoundStyle, Projectile.position);
        }
        public override void AI()
        {
             if (Main.rand.NextBool(6)) {
                Dust.NewDust(Projectile.position + Projectile.velocity, Projectile.width, Projectile.height, DustID.UltraBrightTorch, Projectile.velocity.X * 0.5f, Projectile.velocity.Y * 0.5f);
            }
            float maxDetectRadius = 300f;
            float projSpeed = 10f;
            NPC closestNPC = FindClosestNPC(maxDetectRadius);
            if (closestNPC == null)
            return;
            Projectile.rotation = Projectile.velocity.ToRotation() + MathHelper.PiOver2 - MathHelper.PiOver4 * Projectile.spriteDirection;
            Projectile.velocity = (closestNPC.Center - Projectile.Center).SafeNormalize(Vector2.Zero) * projSpeed;
        }
        public override void OnHitNPC(NPC target, int damage, float knockBack, bool crit)
        {
            target.AddBuff(BuffID.Venom, 5 * 60);
            target.immune[Projectile.owner] = 5;
        }
        public NPC FindClosestNPC(float maxDetectDistance)
        {
            NPC closestNPC = null;
            float sqrMaxDetectDistance = maxDetectDistance * maxDetectDistance;
            for (int k = 0; k < Main.maxNPCs; k++) {
                NPC target = Main.npc[k];
                if (target.CanBeChasedBy()) {
                    float sqrDistanceToTarget = Vector2.DistanceSquared(target.Center, Projectile.Center);
                    if (sqrDistanceToTarget < sqrMaxDetectDistance) {
                        sqrMaxDetectDistance = sqrDistanceToTarget;
                        closestNPC = target;
                    }
                }
            }
            return closestNPC;
        }
    }
}
